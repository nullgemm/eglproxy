project (EGLPROXY C)
cmake_minimum_required(VERSION 2.8.9)

set(EGLPROXY_VERSION_MAJOR "0")
set(EGLPROXY_VERSION_MINOR "1")
set(EGLPROXY_VERSION "${EGLPROXY_VERSION_MAJOR}.${EGLPROXY_VERSION_MINOR}")

option(BUILD_SHARED_LIBS "Build shared libraries" ON)
option(NINJA_MODE "Enable all warnings" ON)
option(BUILD_EGLPROXY_TESTS "Build eglproxy tests" OFF)

list(APPEND EGLPROXY_SOURCES "src/eglproxy.c")
list(APPEND EGLPROXY_SOURCES "src/egl_proc.c")
list(APPEND EGLPROXY_HEADERS "inc/eglproxy.h")
list(APPEND EGLPROXY_INCLUDE_DIRS "inc")

find_package(OpenGL REQUIRED)
list(APPEND EGLPROXY_INCLUDE_DIRS ${OPENGL_INCLUDE_DIR})
list(APPEND EGLPROXY_LIBRARIES ${OPENGL_gl_LIBRARY})


if (UNIX AND NOT APPLE)
    find_package(X11 REQUIRED)
    list(APPEND EGLPROXY_INCLUDE_DIRS ${X11_X11_INCLUDE_PATH})
    list(APPEND EGLPROXY_LIBRARIES ${X11_X11_LIB})
    list(APPEND EGLPROXY_SOURCES "src/egl_glx.c")
elseif(WIN32)
    list(APPEND EGLPROXY_SOURCES "src/egl_wgl.c")
endif()

if(NINJA_MODE)
    if (CMAKE_C_COMPILER_ID MATCHES "^GNU$")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --std=c89 -pedantic -Wall -Wextra -Wformat-nonliteral -Wformat-security -Wformat-y2k -Winit-self -Wmissing-include-dirs -Wswitch-default -Wswitch-enum -Wsync-nand -Wstrict-overflow=5 -Wtrampolines -Wfloat-equal -Wdeclaration-after-statement -Wundef -Wshadow -Wunsafe-loop-optimizations -Wbad-function-cast -Wc++-compat -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Wsign-conversion -Wlogical-op -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnormalized=nfc -Wredundant-decls -Wnested-externs -Winline -Wvla -Wdisabled-optimization -Wmissing-prototypes -Wmissing-declarations")
    elseif(CMAKE_C_COMPILER_ID MATCHES "^MSVC$")
        if(CMAKE_C_FLAGS MATCHES "/W[0-4]")
            string(REGEX REPLACE "/W[0-4]" "/Wall" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
        else()
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /Wall")
        endif()
    elseif(CMAKE_C_COMPILER_ID MATCHES "^Clang$")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --std=c89 -pedantic -Weverything")
    endif()
endif()

include_directories(${EGLPROXY_INCLUDE_DIRS})
add_library(eglproxy ${EGLPROXY_SOURCES} ${EGLPROXY_HEADERS})
target_link_libraries(eglproxy ${EGLPROXY_LIBRARIES})

if(BUILD_EGLPROXY_TESTS)
    add_subdirectory(tests)
endif()
